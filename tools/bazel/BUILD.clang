load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load(":cc_toolchain_config.bzl", "cc_toolchain_config")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "all_files",
    srcs = glob(["**"]) + select({
        "@main_workspace//tools/bazel/platforms:arm_none_config": [
            # Need ARM files due to libstdc++ and sysroot
            "@arm//:all_files",
        ],
    }),
)

cc_toolchain_config(
    name = "linux_x86_64_toolchain_config",
    compiler_name = "clang",
    target_cpu = "x86_64",
    tool_paths = {
        # We use clang++ for both compiler and linker since it's required for
        # the sanitizer to work, according to the docs:
        # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#usage
        "gcc" : "usr/bin/clang++",
        "ld" : "usr/bin/clang++",
        "ar": "/usr/bin/ar",
        "cpp" : "/bin/false",
        "gcov" : "/bin/false",
        "nm" : "/bin/false",
        "objdump" : "/bin/false",
        "strip": "/bin/false",
    }
)

cc_toolchain(
    name = "linux_x86_64_toolchain",
    toolchain_identifier = "linux_x86_64-toolchain",
    toolchain_config = ":linux_x86_64_toolchain_config",
    all_files = ":all_files",
    compiler_files = ":all_files",
    dwp_files = ":all_files",
    linker_files = ":all_files",
    objcopy_files = ":all_files",
    strip_files = ":all_files",
    supports_param_files = 0,
)

cc_toolchain_config(
    name = "arm_none_toolchain_config",
    compiler_name = "clang",
    target_cpu = "arm",
    sysroot = "external/arm",
    # TODO: get this programatically
    system_includes = [
        "external/arm/bin/../lib/gcc/arm-none-eabi/13.2.1/../../../../arm-none-eabi/include/c++/13.2.1",
        "external/arm/bin/../lib/gcc/arm-none-eabi/13.2.1/../../../../arm-none-eabi/include/c++/13.2.1/arm-none-eabi/thumb/v7e-m+fp/hard",
        "external/arm/bin/../lib/gcc/arm-none-eabi/13.2.1/../../../../arm-none-eabi/include/c++/13.2.1/backward",
        "external/arm/bin/../lib/gcc/arm-none-eabi/13.2.1/include",
        "external/arm/bin/../lib/gcc/arm-none-eabi/13.2.1/include-fixed",
        "external/arm/bin/../lib/gcc/arm-none-eabi/13.2.1/../../../../arm-none-eabi/include",
    ],
    tool_paths = {
        "gcc" : "usr/bin/clang++",
        "ld" : "usr/bin/clang++",
        "ar": "/bin/false",
        "cpp" : "/bin/false",
        "gcov" : "/bin/false",
        "nm" : "/bin/false",
        "objdump" : "/bin/false",
        "strip": "/bin/false",
    }
)

filegroup(
    name = "empty",
)

cc_toolchain(
    name = "arm_none_toolchain",
    toolchain_identifier = "arm_none-toolchain",
    toolchain_config = ":arm_none_toolchain_config",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
)
